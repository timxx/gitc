#!/usr/bin/env python

from PyQt4.QtGui import *
from PyQt4.QtCore import *

from ui.mainwindow import *
from gitview import *
from common import *
from preferences import *
from settings import *

import os
import sys
import argparse


class MainWindow(QMainWindow):

    def __init__(self, logMode=False, parent=None):
        super(MainWindow, self).__init__(parent)

        self.logMode = logMode
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.progressBarA = QProgressBar()
        self.ui.statusbar.addWidget(self.progressBarA, 1)
        self.progressBarA.setVisible(False)

        if not self.logMode:
            self.progressBarB = QProgressBar()
            self.ui.statusbar.addWidget(self.progressBarB, 1)
            self.progressBarB.setVisible(False)

        if not self.logMode:
            self.ui.gitViewA.setBranchDesc(self.tr("Branch A:"))
            self.ui.gitViewB.setBranchDesc(self.tr("Branch B:"))
            self.ui.gitViewB.setBranchB()
        else:
            self.ui.gitViewB.setVisible(False)

        self.__setupSignals()

        self.ui.lePattern.installEventFilter(self)

        if not self.__restoreState():
            self.showMaximized()

    def __setupSignals(self):
        self.ui.acQuit.triggered.connect(QCoreApplication.instance().quit)

        self.ui.acPreferences.triggered.connect(
            self.__onAcPreferencesTriggered)

        self.ui.btnRepoBrowse.clicked.connect(self.__onBtnRepoBrowseClicked)
        self.ui.btnFileSelect.clicked.connect(self.__onBtnFileSelectClicked)

        self.ui.leRepo.textChanged.connect(self.__onRepoChanged)
        self.ui.cbPatternType.currentIndexChanged.connect(
            self.__onPatternTypeChanged)

    def __onBtnRepoBrowseClicked(self, checked):
        repoDir = QFileDialog.getExistingDirectory(self,
                                                   self.tr(
                                                       "Choose repository directory"),
                                                   "",
                                                   QFileDialog.ShowDirsOnly)
        if not repoDir:
            return

        repoDir = getRepoDirectory(repoDir)
        if not repoDir:
            QMessageBox.critical(self, self.windowTitle(),
                                 self.tr("The directory you choosen is not a git repository!"))
            return

        self.ui.leRepo.setText(repoDir)

    def __onBtnFileSelectClicked(self, checked):
        path = QFileDialog.getOpenFileName(self,
                                           self.windowTitle(),
                                           self.ui.leRepo.text())
        if path:
            path = path.replace(self.ui.leRepo.text(), "")
            self.ui.lePattern.setText(path.lstrip("/"))

    def __onRepoChanged(self, repoDir):
        if not getRepoDirectory(repoDir):
            self.ui.statusbar.showMessage(
                self.tr("'{0}' is not a git repository".format(repoDir)),
                5000)  # 5 seconds
            # let gitview clear the old branches
            repoDir = None
        else:
            # change working directory to repoDir
            os.chdir(repoDir)

        self.ui.gitViewA.setRepo(repoDir)
        if not self.logMode:
            self.ui.gitViewB.setRepo(repoDir)

    def __onPatternTypeChanged(self, index):
        self.ui.btnFileSelect.setEnabled(index == 0)
        pattern = self.ui.lePattern.text().strip()
        self.filterPattern(pattern)

    def __onAcPreferencesTriggered(self):
        settings = QApplication.instance().settings()
        preferences = Preferences(settings, self)
        if preferences.exec() == QDialog.Accepted:
            preferences.save()
            self.ui.gitViewA.updateSettings()
            if not self.logMode:
                self.ui.gitViewB.updateSettings()

    def __saveState(self):
        sett = qApp.instance().settings()
        if not sett.rememberWindowState():
            return False

        state = self.saveState()
        geometry = self.saveGeometry()
        sett.setWindowState(state, geometry, self.isMaximized())

        self.ui.gitViewA.saveState(sett, True)
        self.ui.gitViewB.saveState(sett, False)

        return True

    def __restoreState(self):
        sett = qApp.instance().settings()
        if not sett.rememberWindowState():
            return False

        state, geometry, isMaximized = sett.windowState()
        self.restoreState(state)
        if geometry:
            self.restoreGeometry(geometry)

        self.ui.gitViewA.restoreState(sett, True)
        self.ui.gitViewB.restoreState(sett, False)

        if isMaximized:
            self.showMaximized()
        else:
            self.show()

        return True

    def filterPattern(self, pattern):
        index = self.ui.cbPatternType.currentIndex()
        if index == 0:
            self.ui.gitViewA.filterPath(pattern)
            if not self.logMode:
                self.ui.gitViewB.filterPath(pattern)
        else:
            self.ui.gitViewA.filterCommit(pattern)
            if not self.logMode:
                self.ui.gitViewB.filterCommit(pattern)

    def showMessage(self, msg, timeout=5000):
        self.ui.statusbar.showMessage(msg, timeout)

    def showProgress(self, maximum, isBranchA):
        progressBar = self.progressBarA if isBranchA else self.progressBarB
        progressBar.setRange(0, maximum)
        progressBar.setVisible(True)

    def hideProgress(self, isBranchA):
        progressBar = self.progressBarA if isBranchA else self.progressBarB
        progressBar.setVisible(False)

    def updateProgress(self, value, isBranchA):
        progressBar = self.progressBarA if isBranchA else self.progressBarB
        progressBar.setValue(value)

    def eventFilter(self, obj, event):
        if event.type() == QEvent.KeyPress and event.key() == Qt.Key_Return:
            if obj == self.ui.lePattern:
                pattern = obj.text().strip()
                self.filterPattern(pattern)

        return False

    def closeEvent(self, event):
        self.__saveState()

        super(MainWindow, self).closeEvent(event)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            sett = qApp.instance().settings()
            if sett.quitViaEsc():
                self.close()
                return

        super(MainWindow, self).keyPressEvent(event)

    def setRepoDir(self, repoDir):
        self.ui.leRepo.setText(repoDir)

    def setFilterFile(self, filePath):
        self.ui.lePattern.setText(filePath)
        if self.ui.cbPatternType.currentIndex() != 0:
            self.ui.cbPatternType.setCurrentIndex(0)
        else:
            self.__onPatternTypeChanged(0)


class Application(QApplication):

    def __init__(self, argv):
        super(Application, self).__init__(argv)

        self._settings = Settings(self)

    def settings(self):
        return self._settings


if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument("-r", "--repo",
                        help="Init repositories directory, default to current working dir if it is.")
    parser.add_argument("-f", "--file",
                        help="Filter file")
    parser.add_argument("-l", "--log-mode", action="store_true",
                        help="Show log only")

    args = parser.parse_args()

    repoDir = getRepoDirectory(os.getcwd())
    filterFile = args.file

    if args.repo:
        repoDir = getRepoDirectory(args.repo)

    app = Application(sys.argv)

    window = MainWindow(args.log_mode)
    window.setGeometry(QStyle.alignedRect(
        Qt.LeftToRight, Qt.AlignCenter,
        window.size(),
        app.desktop().availableGeometry()))

    if filterFile:
        window.setFilterFile(filterFile)

    if repoDir:
        window.setRepoDir(repoDir)

    app.exec()
    app.deleteLater()
