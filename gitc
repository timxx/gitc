#!/usr/bin/env python

from PyQt4.QtGui import *
from PyQt4.QtCore import *

from ui.mainwindow import *
from gitview import *
from preferences import *
from settings import *
from git import Git
from diffview import PatchViewer

import os
import sys
import argparse


class MainWindow(QMainWindow):

    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.gitViewB = None

        self.progressBarA = QProgressBar()
        self.ui.statusbar.addWidget(self.progressBarA, 1)
        self.progressBarA.setVisible(False)

        self.__setupSignals()
        self.__setupMenus()

    def __setupSignals(self):
        self.ui.acQuit.triggered.connect(QCoreApplication.instance().quit)

        self.ui.acPreferences.triggered.connect(
            self.__onAcPreferencesTriggered)

        self.ui.btnRepoBrowse.clicked.connect(self.__onBtnRepoBrowseClicked)
        self.ui.btnFileSelect.clicked.connect(self.__onBtnFileSelectClicked)

        self.ui.leRepo.textChanged.connect(self.__onRepoChanged)
        self.ui.cbPatternType.currentIndexChanged.connect(
            self.__onPatternTypeChanged)

        self.ui.acIgnoreNone.triggered.connect(
            self.__onAcIgnoreNoneTriggered)
        self.ui.acIgnoreEOL.triggered.connect(
            self.__onAcIgnoreEOLTriggered)
        self.ui.acIgnoreAll.triggered.connect(
            self.__onAcIgnoreAllTriggered)

        self.ui.acCompare.triggered.connect(
            self.__onAcCompareTriggered)

        self.ui.acCopy.triggered.connect(
            self.__onCopyTriggered)

        self.ui.acSelectAll.triggered.connect(
            self.__onSelectAllTriggered)

        self.ui.acFind.triggered.connect(
            self.__onFindTriggered)

        self.ui.menu_Edit.aboutToShow.connect(
            self.__updateEditMenu)

        self.ui.acVisualizeWhitespace.triggered.connect(
            self.__onAcVisualizeWhitespaceTriggered)

        self.ui.lePattern.returnPressed.connect(
            self.__onPatternReturnPressed)

        # settings
        sett = qApp.instance().settings()

        sett.ignoreWhitespaceChanged.connect(
            self.__onIgnoreWhitespaceChanged)

        sett.showWhitespaceChanged.connect(
            self.ui.acVisualizeWhitespace.setChecked)

        # application
        qApp.focusChanged.connect(self.__updateEditMenu)

    def __setupMenus(self):
        acGroup = QActionGroup(self)
        acGroup.addAction(self.ui.acIgnoreNone)
        acGroup.addAction(self.ui.acIgnoreEOL)
        acGroup.addAction(self.ui.acIgnoreAll)

    def __updateEditMenu(self):
        fw = qApp.focusWidget()

        self.ui.acCopy.setEnabled(False)
        self.ui.acSelectAll.setEnabled(False)
        self.ui.acFind.setEnabled(False)

        if not fw:
            pass
        elif isinstance(fw, PatchViewer):
            self.ui.acCopy.setEnabled(fw.hasSelection())
            self.ui.acSelectAll.setEnabled(True)
            self.ui.acFind.setEnabled(True)
        elif isinstance(fw, QLineEdit):
            self.ui.acCopy.setEnabled(fw.hasSelectedText())
            self.ui.acSelectAll.setEnabled(True)
            self.ui.acFind.setEnabled(False)

    def __onBtnRepoBrowseClicked(self, checked):
        repoDir = QFileDialog.getExistingDirectory(self,
                                                   self.tr(
                                                       "Choose repository directory"),
                                                   "",
                                                   QFileDialog.ShowDirsOnly)
        if not repoDir:
            return

        repoDir = Git.repoTopLevelDir(repoDir)
        if not repoDir:
            QMessageBox.critical(self, self.windowTitle(),
                                 self.tr("The directory you choosen is not a git repository!"))
            return

        self.ui.leRepo.setText(repoDir)

    def __onBtnFileSelectClicked(self, checked):
        path = QFileDialog.getOpenFileName(self,
                                           self.windowTitle(),
                                           self.ui.leRepo.text())
        if path:
            path = path.replace(self.ui.leRepo.text(), "")
            self.ui.lePattern.setText(path.lstrip("/"))

    def __onRepoChanged(self, repoDir):
        if not Git.repoTopLevelDir(repoDir):
            msg = self.tr("'{0}' is not a git repository")
            self.ui.statusbar.showMessage(
                msg.format(repoDir),
                5000)  # 5 seconds
            # let gitview clear the old branches
            repoDir = None
            # clear
            Git.REPO_DIR = None
            Git.REF_MAP.clear()
            Git.REV_HEAD = None
        else:
            Git.REPO_DIR = repoDir
            Git.REF_MAP = Git.refs()
            Git.REV_HEAD = Git.revHead()

        self.ui.gitViewA.setRepo(repoDir)
        if self.gitViewB:
            self.gitViewB.setRepo(repoDir)

    def __onPatternTypeChanged(self, index):
        self.ui.btnFileSelect.setEnabled(index == 0)
        pattern = self.ui.lePattern.text().strip()
        self.filterPattern(pattern)

    def __onAcPreferencesTriggered(self):
        settings = qApp.instance().settings()
        preferences = Preferences(settings, self)
        if preferences.exec() == QDialog.Accepted:
            preferences.save()
            self.ui.gitViewA.updateSettings()
            if self.gitViewB:
                self.gitViewB.updateSettings()

    def __onIgnoreWhitespaceChanged(self, index):
        actions = [self.ui.acIgnoreNone,
                   self.ui.acIgnoreEOL,
                   self.ui.acIgnoreAll]
        if index < 0 or index >= len(actions):
            index = 0

        actions[index].setChecked(True)

    def __onAcIgnoreNoneTriggered(self, checked):
        sett = qApp.instance().settings()
        sett.setIgnoreWhitespace(0)

    def __onAcIgnoreEOLTriggered(self, checked):
        sett = qApp.instance().settings()
        sett.setIgnoreWhitespace(1)

    def __onAcIgnoreAllTriggered(self, checked):
        sett = qApp.instance().settings()
        sett.setIgnoreWhitespace(2)

    def __onAcVisualizeWhitespaceTriggered(self, checked):
        sett = qApp.instance().settings()
        sett.setShowWhitespace(checked)

        self.ui.gitViewA.updateSettings()
        if self.gitViewB:
            self.gitViewB.updateSettings()

    def __onAcCompareTriggered(self, checked):
        if checked:
            self.setCompareMode()
        else:
            self.setLogMode()

    def __onPatternReturnPressed(self):
        pattern = self.ui.lePattern.text().strip()
        self.filterPattern(pattern)

    def __onCopyTriggered(self):
        fw = qApp.focusWidget()
        assert fw
        fw.copy()

    def __onSelectAllTriggered(self):
        fw = qApp.focusWidget()
        assert fw
        fw.selectAll()

    def __onFindTriggered(self):
        fw = qApp.focusWidget()
        assert fw and isinstance(fw, PatchViewer)
        fw.executeFind()

    def saveState(self):
        sett = qApp.instance().settings()
        if not sett.rememberWindowState():
            return False

        state = super(MainWindow, self).saveState()
        geometry = self.saveGeometry()
        sett.setWindowState(state, geometry, self.isMaximized())

        self.ui.gitViewA.saveState(sett, True)
        if self.gitViewB:
            self.gitViewB.saveState(sett, False)

        return True

    def restoreState(self):
        sett = qApp.instance().settings()
        if not sett.rememberWindowState():
            return False

        state, geometry, isMaximized = sett.windowState()
        if state:
            super(MainWindow, self).restoreState(state)
        if geometry:
            self.restoreGeometry(geometry)

        self.ui.gitViewA.restoreState(sett, True)
        if self.gitViewB:
            self.gitViewB.restoreState(sett, False)

        if isMaximized:
            self.setWindowState(self.windowState() | Qt.WindowMaximized)

        self.__onIgnoreWhitespaceChanged(sett.ignoreWhitespace())
        self.ui.acVisualizeWhitespace.setChecked(
            sett.showWhitespace())

        return True

    def filterPattern(self, pattern):
        index = self.ui.cbPatternType.currentIndex()
        if index == 0:
            self.ui.gitViewA.filterPath(pattern)
            if self.gitViewB:
                self.gitViewB.filterPath(pattern)
        else:
            self.ui.gitViewA.filterCommit(pattern)
            if self.gitViewB:
                self.gitViewB.filterCommit(pattern)

    def showMessage(self, msg, timeout=5000):
        self.ui.statusbar.showMessage(msg, timeout)

    def showProgress(self, maximum, isBranchA):
        progressBar = self.progressBarA if isBranchA else self.progressBarB
        if progressBar:
            progressBar.setRange(0, maximum)
            progressBar.setVisible(True)

    def hideProgress(self, isBranchA):
        progressBar = self.progressBarA if isBranchA else self.progressBarB
        if progressBar:
            progressBar.setVisible(False)

    def updateProgress(self, value, isBranchA):
        progressBar = self.progressBarA if isBranchA else self.progressBarB
        if progressBar:
            progressBar.setValue(value)

    def closeEvent(self, event):
        self.saveState()

        super(MainWindow, self).closeEvent(event)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            sett = qApp.instance().settings()
            if sett.quitViaEsc():
                self.close()
                return

        super(MainWindow, self).keyPressEvent(event)

    def setRepoDir(self, repoDir):
        self.ui.leRepo.setText(repoDir)

    def setFilterFile(self, filePath):
        self.ui.lePattern.setText(filePath)
        if self.ui.cbPatternType.currentIndex() != 0:
            self.ui.cbPatternType.setCurrentIndex(0)
        else:
            self.__onPatternTypeChanged(0)

    def setCompareMode(self):
        self.gitViewB = GitView(self)
        self.ui.splitter.addWidget(self.gitViewB)

        self.progressBarB = QProgressBar()
        self.ui.statusbar.addWidget(self.progressBarB, 1)
        self.progressBarB.setVisible(False)

        self.ui.gitViewA.setBranchDesc(self.tr("Branch A:"))
        self.gitViewB.setBranchDesc(self.tr("Branch B:"))
        self.gitViewB.setBranchB()

        repoDir = self.ui.leRepo.text()
        self.gitViewB.setRepo(repoDir)
        self.ui.acCompare.setChecked(True)

    def setLogMode(self):
        self.ui.statusbar.removeWidget(self.progressBarB)
        self.ui.gitViewA.setBranchDesc(self.tr("Branch"))

        self.gitViewB.deleteLater()
        self.progressBarB.deleteLater()

        self.gitViewB = None
        self.progressBarB = None
        self.ui.acCompare.setChecked(False)


def appDirPath():
    # qApp.applicationDirPath not works as expected
    if getattr(sys, "frozen", False):
        path = os.path.realpath(sys.executable)
    else:
        path = os.path.realpath(__file__)
    return os.path.dirname(path)


def dataDirPath():
    return appDirPath() + "/data"


class Application(QApplication):

    def __init__(self, argv):
        super(Application, self).__init__(argv)

        self.setAttribute(Qt.AA_DontShowIconsInMenus, False)
        self.setApplicationName("gitc")

        iconPath = dataDirPath() + "/icons/gitc.svg"
        self.setWindowIcon(QIcon(iconPath))

        self.setupTranslator()
        self._settings = Settings(self)

    def settings(self):
        return self._settings

    def setupTranslator(self):
        # the Qt translations
        dirPath = QLibraryInfo.location(QLibraryInfo.TranslationsPath)
        translator = QTranslator(self)
        if translator.load(QLocale.system(), "qt", "_", dirPath):
            self.installTranslator(translator)
        else:
            translator = None

        translator = QTranslator(self)
        dirPath = dataDirPath() + "/translations"
        if translator.load(QLocale.system(), "", "", dirPath):
            self.installTranslator(translator)
        else:
            translator = None


if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument("-r", "--repo",
                        help="Init repositories directory, default to current working dir if it is.")
    parser.add_argument("-f", "--file",
                        help="Filter file")
    parser.add_argument("-c", "--compare-mode", action="store_true",
                        help="Compare mode, show two branches for comparing")

    args = parser.parse_args()

    repoDir = Git.repoTopLevelDir(os.getcwd())
    filterFile = args.file

    if args.repo:
        repoDir = Git.repoTopLevelDir(args.repo)

    app = Application(sys.argv)

    window = MainWindow()
    window.setGeometry(QStyle.alignedRect(
        Qt.LeftToRight, Qt.AlignCenter,
        window.size(),
        app.desktop().availableGeometry()))

    if args.compare_mode:
        window.setCompareMode()

    if filterFile:
        window.setFilterFile(filterFile)

    if repoDir:
        window.setRepoDir(repoDir)

    if window.restoreState():
        window.show()
    else:
        window.showMaximized()

    app.exec()
    app.deleteLater()
